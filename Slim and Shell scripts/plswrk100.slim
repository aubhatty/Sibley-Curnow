function (integer$)countOfMutationsInSubpop(object<Subpopulation> subpop) {
	muts = subpop.genomesNonNull.mutations;
	return size(muts);//used to log allele frequencies in each subpopulation
}
initialize() {
	defineConstant("H", 0.5);
	defineConstant("S1", -0.1);
	defineConstant("S2", 0.1);
	initializeMutationType("m2", H, "f", S2);//m2 represents the Q allele, wild type is P
	m2.convertToSubstitution = F;
	initializeGenomicElementType("g2", m2, 1.0);
	initializeGenomicElement(g2, 0, 0);//just one allele
	initializeMutationRate(1e-5);
	initializeRecombinationRate(0);
}

1 early() {
	sim.addSubpop("p1", 100);//specifies number of individuals in patch 1 is 1000. (Each individual has 2 alleles)  
	sim.addSubpop("p2", 100);//specifies number of individuals in patch 2 is 1000. 
	p1.setMigrationRates(p2, 0.05); // migration rate from p2 to p1
	p2.setMigrationRates(p1, 0.05); // migration rate from p1 to p2
	log = community.createLogFile("100pop1.csv",append = T, sep="\t", logInterval=10);//creates an output file sim_log on Desktop
	//sim_log contains the numbers of Q alleles in each patch each generation
	log.addCycle();//outputs generation number
	log.addCustomColumn("count_p1", "countOfMutationsInSubpop(p1);");//output number of m2 alleles in patch 1
	log.addCustomColumn("count_p2", "countOfMutationsInSubpop(p2);");//output number of m2 alleles in patch 2
}

mutation(m2) {
	//the following code written by Ben Haller ensures there is only one m2 mutation in the model
	if (!exists("A"))
	{
		defineConstant("A", mut);
		return T;
	}
	if (genome.containsMarkerMutation(m2, mut.position))
		return T;
	return A;
}

late()
{
	//the following code written by Ben Haller implements back-mutations from m2 to wild type
	m2muts = sim.mutationsOfType(m2);
	
	// do we have more than one m2 mutation segregating?
	// if so, we have stacked m2 mutations to remove
	
	if (m2muts.length() > 1)
	{
		genomes = sim.subpopulations.genomes;
		counts = genomes.countOfMutationsOfType(m2);
		stacked = genomes[counts > 1];
		if (stacked.length() > 0)
			stacked.removeMutations(m2muts);
		else
			stop("could not find stacked mutation");
	}
}
mutationEffect(m2, p1){
	if (homozygous)
		return 1.0 + S1;
	else
		return 1.0 + H *S1;
} //fitness in subpopulation 1 is 1-S in individiduals homozygous or heterozygous in m2 if h=1
mutationEffect(m2, p2){
	if (homozygous)
		return 1.0 + S2;
	else
		return 1.0 + H *S2;
} //fitness in subpopulation 2 is 1+S in individiduals homozygous or heterozygous in m2 if h=1

5001 late() {}//simulation stops after 5001 generations

